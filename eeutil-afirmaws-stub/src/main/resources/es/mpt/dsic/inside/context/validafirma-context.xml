<!-- Copyright (C) 2012-13 MINHAP, Gobierno de EspaÃ±a
   This program is licensed and may be used, modified and redistributed under the terms
   of the European Public License (EUPL), either version 1.1 or (at your
   option) any later version as soon as they are approved by the European Commission.
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
   or implied. See the License for the specific language governing permissions and
   more details.
   You should have received a copy of the EUPL1.1 license
   along with this program; if not, you may find it at
   http://joinup.ec.europa.eu/software/page/eupl/licence-eupl --> 
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:http-conf="http://cxf.apache.org/transports/http/configuration" xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:util="http://www.springframework.org/schema/util" xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd			
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
			http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd			
			http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd"> 
    <context:annotation-config /> 
    <context:component-scan base-package="afirmaws" /> 
    <import resource="classpath:META-INF/cxf/cxf.xml" /> 
    <import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" /> 
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml" /> 
    <bean id="marshallerMvalidafirma" class="org.springframework.oxm.jaxb.Jaxb2Marshaller"> 
        <!-- property name="contextPath" value="afirmaws.ws.firma"/ --> 
        <property name="contextPath" value="afirmaws.services.nativos.model.validarfirma" /> 
    </bean> 
    <bean id="marshallerMvalidacert" class="org.springframework.oxm.jaxb.Jaxb2Marshaller"> 
        <!-- property name="contextPath" value="afirmaws.ws.validacion"/ --> 
        <property name="contextPath" value="afirmaws.services.nativos.model.validarcertificado" /> 
    </bean> 
    <bean id="marshallerMdssafirmaverify" class="org.springframework.oxm.jaxb.Jaxb2Marshaller"> 
        <property name="contextPath" value="afirmaws.services.dss.afirma.dss._1_0.profile.xss.schema:afirmaws.services.dss.oasis.names.tc.dss._1_0.core.schema:afirmaws.services.dss.oasis.names.tc.dss._1_0.profiles.verificationreport.schema:afirmaws.services.dss.oasis.names.tc.saml._1_0.assertion:afirmaws.services.dss.org.etsi.uri._01903.v1_3:afirmaws.services.dss.org.etsi.uri._02231.v2:afirmaws.services.dss.org.w3._2000._09.xmldsig" /> 
        <!-- property name="contextPath" value="afirmaws.services.dss.afirma.dss"/ --> 
    </bean> 
    <bean id="firma" class="afirmaws.services.nativos.ws.validarfirma.Firma" factory-bean="validaFirmaServiceFactory" factory-method="create" /> 
    <bean id="valCertificado" class="afirmaws.services.nativos.ws.validarcertificado.Validacion" factory-bean="validaCertificadoServiceFactory" factory-method="create" /> 
    <bean id="dssVerify" class="afirmaws.services.dss.oasis.names.tc.dss._1_0.core.schema.DSSSignature" factory-bean="dssSignatureServiceFactory" factory-method="create" /> 
    <bean id="dssProcessorFactory" class="es.mpt.dsic.inside.dssprocessing.DSSSignerProcessorFactory" /> 
    <!-- ********************************************************************************************************************************************** --> 
    <!-- ************** bean para conectar por certificado a afirma. Para funcionar asi hay que hacer         ***************************************** --> 
    <!-- comentar el ref bean="wss4jOut"  y descomentar el  ref bean="wss4jOutCertificado" y las propiedades de los afirma.properties   *************** --> 
    <!-- ********************************************************************************************************************************************** --> 
    <bean id="serverAuthPasswordCallback" class="es.mpt.dsic.inside.security.wss4j.ServerAuthPasswordCallback"> 
        <property name="passwordCertificado" value="${org.apache.ws.security.crypto.merlin.keystore.password}" /> 
    </bean> 
    <bean id="wss4jOutCertificado" class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor"> 
        <constructor-arg> 
            <map> 
                <entry key="action" value="Signature" /> 
                <!-- The user's name. It is used differently by each of the WS-Security functions. 
           			The UsernameToken function sets this name in the UsernameToken.
    				The Signing function uses this name as the alias name in the keystore to get user's certificate and private key 
    					to perform signing if SIGNATURE_USER is not used.
    				The encryption functions uses this parameter as fallback if ENCRYPTION_USER is not used.
    				 <entry key="user" value="${afirma.merlin.user}"/>
            --> 
                <entry key="user" value="${org.apache.ws.security.crypto.merlin.keystore.alias}" /> 
                <!-- es el alias de la clave a usar: The user's name for signature. This name is used as the alias name in the keystore to get user's 
           		certificate and private key to perform signing. If this parameter is not set, then the signature function falls back to the USER parameter.  --> 
                <entry key="signatureUser" value="${org.apache.ws.security.crypto.merlin.keystore.alias}" /> 
                <entry key="signatureKeyIdentifier" value="DirectReference" /> 
                <entry key="cryptoProperties" value-ref="secureWebServiceCryptoProperties" /> 
                <entry key="signaturePropRefId" value="cryptoProperties" /> 
                <entry key="passwordCallbackRef">
                    <ref bean="serverAuthPasswordCallback" />
                </entry> 
            </map> 
        </constructor-arg> 
    </bean> 
    <util:properties id="secureWebServiceCryptoProperties"> 
        <prop key="org.apache.ws.security.crypto.provider">
            org.apache.ws.security.components.crypto.Merlin
        </prop> 
        <prop key="org.apache.ws.security.crypto.merlin.keystore.type">
            ${org.apache.ws.security.crypto.merlin.keystore.type}
        </prop> 
        <prop key="org.apache.ws.security.crypto.merlin.keystore.password">
            ${org.apache.ws.security.crypto.merlin.keystore.password}
        </prop> 
        <prop key="org.apache.ws.security.crypto.merlin.keystore.file">
            ${org.apache.ws.security.crypto.merlin.keystore.file}
        </prop> 
        <prop key="org.apache.ws.security.crypto.merlin.keystore.alias">
            ${org.apache.ws.security.crypto.merlin.keystore.alias}
        </prop> 
        <!--  <prop key="org.apache.ws.security.crypto.merlin.alias.password">${org.apache.ws.security.crypto.merlin.alias.password}</prop> --> 
        <!--  <prop key="org.apache.ws.security.crypto.merlin.truststore.file">${org.apache.ws.security.crypto.merlin.truststore.file}</prop> --> 
        <!--  <prop key="org.apache.ws.security.crypto.merlin.truststore.password">${org.apache.ws.security.crypto.merlin.truststore.password}</prop> --> 
        <!--  <prop key="org.apache.ws.security.crypto.merlin.truststore.type">${org.apache.ws.security.crypto.merlin.truststore.type}</prop> --> 
    </util:properties> 
    <!-- ********************************************************************************************************************************************** --> 
    <!-- ********************************* WSS4JOutInterceptor for crear outbound SOAP con uso de certificado ***************************************** --> 
    <!-- ********************************************************************************************************************************************** --> 
    <!-- ********************************************************************************************************************************************** --> 
    <!-- *********************** 							interceptor para usertoken   ************************************************************** --> 
    <!-- ********************************************************************************************************************************************** --> 
    <bean id="passwordHandler" class="afirmaws.util.PWHandler"> 
        <property name="password" value="${afirma.password}" /> 
    </bean> 
    <bean id="wss4jOut" class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor"> 
        <constructor-arg> 
            <map> 
                <entry key="action" value="UsernameToken" /> 
                <entry key="user" value="${afirma.user}" /> 
                <entry key="passwordType" value="PasswordText" /> 
                <entry key="mustUnderstand" value="0" /> 
                <entry key="passwordCallbackRef"> 
                    <ref bean="passwordHandler" /> 
                </entry> 
            </map> 
        </constructor-arg> 
    </bean> 
    <!-- ********************************************************************************************************************************************** --> 
    <!-- **************************                       fin interceptor para usertoken                 ********************************************** --> 
    <!-- ********************************************************************************************************************************************** --> 
    <bean id="validaCertificadoServiceFactory" class="org.apache.cxf.jaxws.JaxWsProxyFactoryBean"> 
        <!-- bean id="certificadoTestServiceFactory" class="es.mpt.dsic.inside.afirma.ws.factory.EeutilJaxWsProxyFactoryBean" --> 
        <property name="serviceClass" value="afirmaws.services.nativos.ws.validarcertificado.Validacion" /> 
        <property name="address" value="${afirma.validarcertificado.url}" /> 
        <property name="inInterceptors"> 
            <list> 
                <ref bean="logIn" /> 
            </list> 
        </property> 
        <property name="outInterceptors"> 
            <list> 
                <ref bean="saajOut" /> 
                <!-- <ref bean="wss4jOutCertificado" /> --> 
                <ref bean="wss4jOut" /> 
                <ref bean="logOut" /> 
            </list> 
        </property> 
    </bean> 
    <bean id="abstractLoggingInterceptor" abstract="true"> 
        <property name="prettyLogging" value="true" /> 
        <property name="limit" value="-1"></property> 
    </bean> 
    <bean id="logIn" class="org.apache.cxf.interceptor.LoggingInInterceptor" parent="abstractLoggingInterceptor" /> 
    <bean id="logOut" class="org.apache.cxf.interceptor.LoggingOutInterceptor" parent="abstractLoggingInterceptor" /> 
    <bean id="saajOut" class="org.apache.cxf.binding.soap.saaj.SAAJOutInterceptor" /> 
    <bean id="validaFirmaServiceFactory" class="org.apache.cxf.jaxws.JaxWsProxyFactoryBean"> 
        <property name="serviceClass" value="afirmaws.services.nativos.ws.validarfirma.Firma" /> 
        <property name="address" value="${afirma.validarfirma.url}" /> 
        <property name="inInterceptors"> 
            <list> 
                <ref bean="logIn" /> 
            </list> 
        </property> 
        <property name="outInterceptors"> 
            <list> 
                <ref bean="saajOut" /> 
                <!-- <ref bean="wss4jOutCertificado" /> --> 
                <ref bean="wss4jOut" /> 
                <ref bean="logOut" /> 
            </list> 
        </property> 
    </bean> 
    <bean id="dssSignatureServiceFactory" class="org.apache.cxf.jaxws.JaxWsProxyFactoryBean"> 
        <property name="serviceClass" value="afirmaws.services.dss.oasis.names.tc.dss._1_0.core.schema.DSSSignature" /> 
        <property name="address" value="${afirma.verifydss.url}" /> 
        <property name="inInterceptors"> 
            <list> 
                <ref bean="logIn" /> 
            </list> 
        </property> 
        <property name="outInterceptors"> 
            <list> 
                <ref bean="saajOut" /> 
                <!-- <ref bean="wss4jOutCertificado" /> --> 
                <ref bean="wss4jOut" /> 
                <ref bean="logOut" /> 
            </list> 
        </property> 
    </bean> 
    <bean id="afirmaClient" class="es.mpt.dsic.inside.afirma.ws.client.AfirmaWSClient"> 
        <property name="firma" ref="firma" /> 
        <property name="marshallercert" ref="marshallerMvalidacert" /> 
        <property name="marshallerfirma" ref="marshallerMvalidafirma" /> 
        <property name="marshallerdssverify" ref="marshallerMdssafirmaverify" /> 
        <property name="valCert" ref="valCertificado" /> 
        <property name="dssAfirmaVerify" ref="dssVerify" /> 
        <property name="dssProcessorFactory" ref="dssProcessorFactory" /> 
        <!-- property name="dssAfirmaProcessorFactory" ref="dssProcessorFactory"/ --> 
        <property name="logIn" ref="logIn" /> 
        <property name="logOut" ref="logOut" /> 
        <property name="connectionTimeOut" value="${afirma.connectionTimeOut}" /> 
        <property name="receiveTimeOut" value="${afirma.receiveTimeOut}" /> 
    </bean> 
</beans>